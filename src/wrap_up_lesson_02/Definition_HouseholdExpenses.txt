//ToDo 1. 『HouseholdExpenses』という名前のクラスを作成してください


//ToDo 2. 以下の指示に従って、作成したクラスに必要なフィールドを追加し、初期化してください

    ・List 型 expenseList …… 支出情報リスト
        - Expense 型の要素を持つ
        - ArrayList として初期化

    ・Map 型 summaryMap …… 分類別の集計結果マップ
        - Key: 文字列型 …… 支出分類
          Value: 整数型 …… 合計金額
        - HashMap として初期化


//ToDo 3. 以下の指示に従って、受け取った支出情報を記録するメソッドを完成させてください

    ・メソッド名: addExpense
    ・引数:
         ・文字列型 category …… 支出分類
         ・文字列型 comment …… 概要
         ・整数型 amount …… 支出金額
    ・戻り値: なし

    以下に続く「3-x.」と採番された指示内容は、
    上記で宣言した addExpense メソッド内に、順番に記述を進めてください

    //ToDo 3-1. 渡された支出金額が不正な値でないかをチェックする処理を追加してください

        ・引数 amount が「0」以下の場合
            ⇒ 「金額が不正なため、入力された内容は記録されませんでした。」
               「1円以上の支出情報を正しく入力してください。」と標準出力
               メソッドを終了する

        【Hint】・void メソッドを途中で終了する方法は『メソッド』の講義で学習しましたね

    //ToDo 3-2. Expense 型のインスタンスを生成し、引数で受け取った3つの値を格納してください

        【Hint】・JavaBeans に値を格納するときは、
                 それぞれのフィールドに対応する Setter を利用します

    //ToDo 3-3. 3-2. で値を格納した Expense 型のインスタンスを expenseList に追加してください

    //ToDo 3-4. 以下の指示に従って、分類別の支出金額の集計処理を記述してください

        ・引数で渡された支出分類(＝category)が Key として summaryMap 内で使われているかチェック

            ・使われている場合 ⇒
                    - 支出分類(＝category) を Key に Value(合計金額)を取得し、
                      そこに引数で渡された 支出金額(＝amount) を加算
                    - Key を「支出分類」 Value を「上記で求めた加算結果」として
                      summaryMap に要素を追加

            ・使われていない場合 ⇒
                    - Key を「支出分類」 Value を引数で受け取った「支出金額(＝amount)」として
                      summaryMap に要素を追加


//ToDo 4. 以下の指示に従って、支出情報を分類別に合計したサマリを標準出力するメソッドを完成させてください

    ・メソッド名: printSummary
    ・引数: なし
    ・戻り値: なし

    以下に続く「4-x.」と採番された指示内容は、
    上記で宣言した printSummary メソッド内に、順番に記述を進めてください

    //ToDo 4-1. 以下の形式に従って、メッセージを標準出力してください ※【】で囲まれた内容は改行コードや変数

        -----------------------
        今月の支出 (分類別)【改行】

    //ToDo 4-2. 以下の指示に従って、サマリの出力処理を追加してください

        ・summaryMap の要素数が「0」の場合
            ⇒ 「データが登録されていません。」と標準出力
        ・それ以外の場合
            ⇒ summaryMap が持つすべての要素を
               「【Key】:【Value】」の形式で標準出力

        【Hint】・Map が持つ要素をすべて出力する方法は『代表的な標準API』の講義資料で解説しています

    //ToDo 4-3. 以下の形式に従って、メッセージを標準出力してください

        -----------------------


//ToDo 5. 以下の指示に従って、指定された分類に当てはまる支出情報の一覧を標準出力するメソッドを完成させてください

    ・メソッド名: printApplicableExpenses
    ・引数:
         ・文字列型 category …… 支出分類
    ・戻り値: なし

    以下に続く「5-x.」と採番された指示内容は、
    上記で宣言した printApplicableExpenses メソッド内に、順番に記述を進めてください

    //ToDo 5-1. 以下の変数を宣言・初期化してください

        ・整数型 count …… 指定された分類に当てはまるデータ件数、初期値「0」

    //ToDo 5-2. 以下の形式に従って、メッセージを標準出力してください ※【】で囲まれた内容は改行コードや変数

        -----------------------
        「【引数で受け取った支出分類(＝category)】」に分類されている支出情報【改行】

    //ToDo 5-3. 以下の指示に従って、支出情報一覧の出力処理を記述してください

        ・引数で渡された支出分類(＝category)が Key として summaryMap 内で使われているかチェック

            - 使われていない場合 ⇒
                ・「該当するデータがありません。」と標準出力

            - 使われている場合 ⇒
                ・ expenseList から支出情報 (Expense) インスタンスをひとつずつ取り出し、
                　 以下の処理を繰り返す

                    - 引数で渡された「支出分類」と、支出情報が持つ「支出分類」の文字列を比較
                      一致した場合のみ、以下の A,B の処理を実行

                        A. 以下の形式でメッセージを標準出力

                            -----------------------
                            概要: 【支出情報 (Expense) の「概要」】
                            金額: 【支出情報 (Expense) の「支出金額」】

                        B. 変数 count の値を1増やす

        【Hint】
              ・List が持つ要素を順番にひとつずつ取り出すには、拡張 for 文を使うのでしたね
              　(for 文でも OK ですが、拡張 for 文の方が効率的に記述できます)

              ・文字列同士の比較には「==」は使いません
              　String クラスが持つメソッドを利用するよう気を付けましょう

    //ToDo 5-4. 以下の形式に従って、メッセージを標準出力してください ※【】で囲まれた内容は改行コードや変数

        -----------------------
        【改行】以上、【count】件のデータが見つかりました。
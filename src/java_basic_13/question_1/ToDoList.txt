//ToDo 1. 以下の指示に従って、文字列型の要素を持つ List 型変数 textList を宣言し、初期化してください

    変数を宣言する場所: 他の変数の下に続ける形(String input の次の行)
    使うコンストラクタ: ArrayList

  【Hint】
      ・初学者の方がコレクションを初期化するときに <> の書き方で混乱しがちです
      　講義資料のサンプルコードを真似して記述しましょう

//ToDo 2. 以下の指示に従って、変数 input が持つ値を変換してください

    処理を追加する場所:
             System.out.print("テキストを入力してください。\n>");
             input = sc.nextLine();  の次の行

    変換処理の内容
             - input に含まれる「全角スペース」("　")をすべて削除
             - input に含まれる「半角スペース」(" ")をすべて削除

  【Hint】
      ・全角/半角スペースを削除する ＝ 空文字("")に置換する …… と言い換えられます
      　つまり、講義資料で取り上げられていた「文字列を置換するメソッド」を使って、
       「全角スペース ⇒ 空文字」「半角スペース ⇒ 空文字」ができれば良い訳です

      ・講義資料で取り上げたメソッドは、置換済みの文字列を戻り値として返すので、
      　変数 input に戻り値を代入してあげれば OK です

//ToDo 3. 2. で変換した文字列を textList に追加してください

//ToDo 4. 以下の指示に従って、テキスト入力を終了するか否かの判定処理を追加してください

    処理を追加する場所:
            System.out.print("追加する場合は「yes」を入力してください。　※ 追加しない場合は Enter\n>");
            input = sc.nextLine();  の次の行

    処理の内容:
            変数 input の値が「yes」以外の場合 ⇒ 変数 isContinue を false にする

  【Hint】・文字列同士の比較は　String クラスのあるメソッドを使えば実現できますが、
          「一致していないとき」に isContinue を変更する処理であることに注意してください
           一致していれば true が返ってくるので、その否定(「!」)を条件式にする必要がありますね

//ToDo 5. 出力されるメッセージを、以下の内容に修正してください

    修正前: 「(改行)XXX件のテキストが入力されました。」
    修正後: 「(改行)(textList の要素数)件が入力されました。」

//ToDo 6. 5. の出力処理の後に続けて、textList が持つすべての要素を標準出力してください